buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'maven'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

task setVersion {
    if (System.env.BUILD_NUMBER) {
        version = projectVersionMajor + '.' + projectVersionMinor + '.' + System.env.BUILD_NUMBER
    } else {
        version = projectVersionMajor + '.' + projectVersionMinor + '.' + projectVersionBuild
    }
}


compileJava {
    options.fork = true
    options.incremental = false
}

jar {
    manifest
            {
                attributes 'Implementation-Title': projectName,
                        'Implementation-Version': version
            }
    baseName = projectName
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task createPom << {
    pom
    {
        project {
            name 'InMemoryStorage'
            groupId 'com.codingrodent'
            description 'In Memory Record Storage'
            url 'https://github.com/codesqueak/InMemoryRecordStore.git'
            scm {
                url 'https://github.com/codesqueak/InMemoryRecordStore'
                connection 'scm:git:git://github.com/codesqueak/InMemoryRecordStore.git'
                developerConnection 'scm:git:ssh://github.com:codesqueak/InMemoryRecordStore.git'
            }

            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.mit.edu'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'codesqueak'
                    name 'codesqueak'
                    email 'codesqueak@gmail.com'
                    organizationUrl 'http://www.codingrodent.com'
                    //  organization 'codesqueak'
                }
            }
        }
    }.writeTo("$buildDir/libs/" + projectName + "-" + version + ".pom")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.7+"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test
        {
            maxParallelForks = 1
            filter
                    {
                        includeTestsMatching "com.codingrodent.InMemoryRecordStore.*"
                    }
            jacoco {
                append = false
                destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
                classDumpFile = file("$buildDir/jacoco/classpathdumps")
                excludes = ['**/InMemoryRecordStore/record/records/**','**/InMemoryRecordStore/**/*Test.*']
            }
        }

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/InMemoryRecordStore/record/records/**',
                    '**/InMemoryRecordStore/**/*Test.*'
            ])
        })
    }
}

findbugs {
    toolVersion = "3.+"
    sourceSets = [sourceSets.main]
    effort = "max"
    reportLevel = "high"
    findbugsTest.enabled = false
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

check.dependsOn jacocoTestReport
test.dependsOn javadoc
test.dependsOn createPom
compileJava.dependsOn setVersion

dependencies {
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:2.0.2-beta")
    testCompile("org.hamcrest:hamcrest-all:1.3")
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}
