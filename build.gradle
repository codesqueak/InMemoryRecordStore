buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion


task setVersion {
	if(System.env.BUILD_NUMBER){
  	version =  projectVersionMajor+'.'+projectVersionMinor+'.'+System.env.BUILD_NUMBER
  }
  else
  {
  	version =  projectVersionMajor+'.'+projectVersionMinor+'.'+projectVersionBuild
  }
}


task toJar (dependsOn: setVersion, type: Jar) {
		println version
		baseName = projectName
        manifest
        {
        attributes 'Implementation-Title': projectName,
                   'Implementation-Version': version
   	 }
}


repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.7+"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test
{
 	maxParallelForks = 1
	filter
	{
	     includeTestsMatching "net.codingrodent.InMemoryRecordStore.*"
	}
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
    
findbugs {
    toolVersion = "3.+"
    sourceSets = [sourceSets.main]
    effort = "max"
    reportLevel = "high"
    findbugsTest.enabled=false
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}
    
check.dependsOn jacocoTestReport
test.dependsOn javadoc
toJar.dependsOn setVersion


dependencies {
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:2.+")
//    testCompile("com.jayway.jsonpath:json-path-parent:1.+")
    testCompile("org.hamcrest:hamcrest-all:1.+")
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}
